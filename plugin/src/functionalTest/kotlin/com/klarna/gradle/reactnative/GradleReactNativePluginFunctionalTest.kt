/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.klarna.gradle.reactnative

import java.io.File
import org.gradle.testkit.runner.GradleRunner
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertTrue

const val DOLLAR = "\$"
/** @see <a href="https://docs.gradle.org/current/userguide/kotlin_dsl.html#sec:plugins_resolution_strategy">Plugin resolution strategy<a> */
const val ANDROID_PLUGIN = """
pluginManagement {
    repositories {
        google()
        gradlePluginPortal()
    }
    resolutionStrategy {
        eachPlugin {
            if(requested.id.namespace == "com.android") {
                useModule("com.android.tools.build:gradle:$DOLLAR{requested.version}")
            }
        }
    }
}    
"""
const val GRADLE_DEPENDENCIES = """
buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}
"""
const val GRADLE_PLUGINS = """
plugins {
    id('${GradleReactNativePlugin.ANDROID_APP_PLUGIN}') version "3.5.0"
    id('${GradleReactNativePlugin.PLUGIN}')
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "dummy.myapplication"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}
"""

/** Functional tests. Try to run plugin in different modes. */
class GradleReactNativePluginFunctionalTest {
    private val projectDir: File = File("build/functionalTest")

    @BeforeTest
    fun initializeDirectory() {
        projectDir.mkdirs()

        // make empty files
        projectDir.resolve("settings.gradle").writeText("$ANDROID_PLUGIN")
        projectDir.resolve("build.gradle").writeText("")

        // runtime jacoco attaching
        val jacocoRuntime: File = File("")
        projectDir.resolve("gradle.properties").writeText("""
            # org.gradle.jvmargs=-javaagent:${jacocoRuntime.absolutePath}=destfile=${projectDir.absolutePath}/jacoco/test.exec
        """.trimIndent())
    }

    @Test
    fun `fail on no android app plugin`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText("""
            plugins {
                id('${GradleReactNativePlugin.PLUGIN}')
            }
        """.trimIndent())

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
            .buildAndFail()

        assertTrue(result.output.contains("Android application build plug-in not found"))
    }

    @Test
    fun `can run task`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText("""
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
        """.trimIndent())

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
//            .withArguments("--info")
//            .withArguments("--stacktrace")
            .build()

        // Verify the result
        assertTrue(result.output.contains(CompileRnBundleTask.DUMMY))
    }

    @Test
    fun `can configure extension`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText("""
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
            react {
               root "../.."
               bundleAssetName "index.android.bundle"
               entryFile "index.android.js"
            }
        """.trimIndent())

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath()
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
            .build()

        // Verify the result
        assertTrue(result.output.contains(CompileRnBundleTask.DUMMY))
    }

    @Test
    fun `welcome to android plugin`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText("""
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
            react {
               root "../.."
               bundleAssetName "index.android.bundle"
               entryFile "index.android.js"
            }
        """.trimIndent())
    }
}
