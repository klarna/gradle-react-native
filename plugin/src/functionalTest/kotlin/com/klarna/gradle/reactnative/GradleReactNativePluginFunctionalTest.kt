/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.klarna.gradle.reactnative

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.InvalidPluginMetadataException
import org.gradle.testkit.runner.internal.PluginUnderTestMetadataReading
import org.gradle.util.GUtil
import org.junit.Rule
import org.junit.rules.TestName
import java.io.File
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertTrue
import kotlin.text.RegexOption.IGNORE_CASE

//region Constants
const val DOLLAR = "\$"
/** @see <a href="https://docs.gradle.org/current/userguide/kotlin_dsl.html#sec:plugins_resolution_strategy">Plugin resolution strategy<a> */
const val ANDROID_PLUGIN = """
pluginManagement {
    repositories {
        google()
        gradlePluginPortal()
    }
    resolutionStrategy {
        eachPlugin {
            if(requested.id.namespace == "com.android") {
                useModule("com.android.tools.build:gradle:$DOLLAR{requested.version}")
            }
        }
    }
}    
"""
/** Gradle build script dependencies needed for android projects. */
const val GRADLE_DEPENDENCIES = """
buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}
"""
/** Minimal Android app configuration section */
const val ANDROID_SECTION = """
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "dummy.myapplication"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
"""
/** buildTypes configuration for `android { ... }` */
const val ANDROID_BUILD_TYPES_SECTION = """
    buildTypes {
        release {
            minifyEnabled false
        }
    }
"""
/** productFlavors configuration for `android { ... }` */
const val ANDROID_FLAVORS_SECTION = """
    flavorDimensions "dummy"
    productFlavors {
        local {
        }
        yellow {
        }
        pink {
        }
    }
"""
/** Gradle default build configuration. */
const val GRADLE_PLUGINS = """
plugins {
    id('${GradleReactNativePlugin.ANDROID_APP_PLUGIN}') version "3.5.0"
    id('${GradleReactNativePlugin.PLUGIN}')
}
"""
//endregion

/** Functional tests. Try to run plugin in different modes. */
class GradleReactNativePluginFunctionalTest {
    private var projectDir: File
    private val jacocoDir: File
    private val metadataDir: File

    @Rule
    @JvmField
    public val testName: TestName = TestName()

    init {
        val pwd = File("").absolutePath
        val projectRootDirName = "/gradle-react-native/plugin"
        if (!pwd.contains(projectRootDirName)) {
            throw AssertionError("Wrong working directory set for functional tests.")
        }
        projectDir = File("build/functionalTest")
        jacocoDir = File("build/jacoco/functionalTest")
        metadataDir = File("build/pluginUnderTestMetadata")
    }

    @BeforeTest
    fun initializeDirectory() {
        // make test name safe for using as a file name
        val testName = testName.methodName.replace(
            "[^a-z0-9.-]".toRegex(IGNORE_CASE), "_"
        )

        projectDir = File("build/functionalTest/$testName")
        projectDir.mkdirs()

        // make empty files
        projectDir.resolve("settings.gradle").writeText("$ANDROID_PLUGIN")
        projectDir.resolve("build.gradle").writeText("")

        // runtime jacoco attaching
        val expandedDir = "build/tmp/expandedArchives"
        val jacocoVer = "org.jacoco.agent-0.8.4.jar"
        val jacocoRuntime: File = File("$expandedDir/$jacocoVer/jacocoagent.jar")
        val javaAgent = "-javaagent:${jacocoRuntime.absolutePath}" +
            "=destfile=${jacocoDir.absolutePath}/$testName.exec"
        val memory = "-Xmx2g" +
            " -Dkotlin.daemon.jvm.options=\"-Xmx2g\"" +
            " -Dkotlin.compiler.execution.strategy=\"in-process\""
        projectDir.resolve("gradle.properties").writeText(
            """
            # method=${this.testName.methodName}
            org.gradle.caching=false
            #org.gradle.daemon=false
            org.gradle.jvmargs=$javaAgent $memory -Dfile.encoding=UTF-8
            """.trimIndent()
        )
    }

    /** Helper that should solve classpath loading for Unit tests running in IDE. */
    private fun loadClasspath(): List<File> {
        try {
            return PluginUnderTestMetadataReading.readImplementationClasspath()
        } catch (ignored: InvalidPluginMetadataException) {
            /* we cannot extract `plugin-under-test-metadata.properties` file from resources. */
        }

        with(File(metadataDir, "plugin-under-test-metadata.properties")) {
            if (!exists()) {
                throw AssertionError("./gradlew :plugin:pluginUnderTestMetadata not called.")
            }
            val properties = GUtil.loadProperties(this)

            return PluginUnderTestMetadataReading.readImplementationClasspath(
                absolutePath,
                properties
            )
        }
    }

    @Test
    fun `fail on no android app plugin`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText(
            """
            plugins {
                id('${GradleReactNativePlugin.PLUGIN}')
            }
            """.trimIndent()
        )

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath(loadClasspath())
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
            .buildAndFail()

        assertTrue(result.output.contains(GradleReactNativePlugin.EXCEPTION_NO_ANDROID_PLUGIN))
    }

    @Test
    fun `can run compile task`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText(
            """
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
            android {
                $ANDROID_SECTION
            }
            """.trimIndent()
        )

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath(loadClasspath())
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
            .build()

        // Verify the result
        assertTrue(result.output.contains(CompileRnBundleTask.DUMMY))
    }

    @Test
    fun `can run copy task`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText(
            """
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
            android {
                $ANDROID_SECTION
            }
            """.trimIndent()
        )

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath(loadClasspath())
            .withProjectDir(projectDir)
            .withArguments(CopyRnBundleTask.NAME)
            .build()

        // Verify the result
        assertTrue(result.output.contains(CopyRnBundleTask.DUMMY))
    }

    @Test
    fun `can configure extension`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText(
            """
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
            android {
                $ANDROID_SECTION
            }
            react {
               root "../.."
               bundleAssetName "index.android.bundle"
               entryFile "index.android.js"
            }
            """.trimIndent()
        )

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath(loadClasspath())
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
            .build()

        // Verify the result
        assertTrue(result.output.contains(CompileRnBundleTask.DUMMY))
    }

    @Test
    fun `welcome to react native plugin`() {
        // Setup the test build
        projectDir.resolve("build.gradle").writeText(
            """
            $GRADLE_DEPENDENCIES
            $GRADLE_PLUGINS
            android {
                $ANDROID_SECTION
                $ANDROID_BUILD_TYPES_SECTION
                $ANDROID_FLAVORS_SECTION
            }
            react {
                root "${DOLLAR}buildDir/../.."
                bundleAssetName "index.bundle"
                entryFile "index.js"
               
                buildTypes {
                    debug {
                        enableHermes = true
                        jsBundleDir = "${DOLLAR}buildDir/intermediates/assets/debug"
                    }
                    release {
                        bundleIn = true
                        jsBundleDir = "${DOLLAR}buildDir/intermediates/assets/release"
                    }
                }
            }
            """.trimIndent()
        )

        // Run the build
        val result = GradleRunner.create()
            .forwardOutput()
            .withPluginClasspath(loadClasspath())
            .withProjectDir(projectDir)
            .withArguments(CompileRnBundleTask.NAME)
            .build()

        assertTrue(result.output.contains(CompileRnBundleTask.DUMMY))
    }
}
